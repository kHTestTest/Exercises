package main

import (
	"fmt"
	yaml "gopkg.in/yaml.v2"
	"io/ioutil"
	"os"
)

//主函数
func main() {
	conf := new(Yaml)
	yamlFile, err := ioutil.ReadFile("config.yaml")
	if err != nil {
		fmt.Printf("yamlFile.Get err #%v ", err)
	}
	err = yaml.Unmarshal(yamlFile, &conf)
	if err != nil {
		fmt.Printf("Unmarshal: %v\n", err)
	}
	//通过访问结构体成员获取yaml文件中对应的key-value
	//fmt.Println(reflect.TypeOf(conf.Animals))
	//fmt.Println(conf.Animals)
	ProcessCmd(os.Args, conf.Animals)
}

// 获取命令行参数并解析
func ProcessCmd(ArgsLists []string, S []struct { Name string "yaml:\"name\""; Type string "yaml:\"type\"" }) {
	IsExists := 0
	for i:= 0; i < len(S); i++ {
		if S[i].Name == ArgsLists[1] {
			IsExists = 1
			if S[i].Type == "cow"{
				if ArgsLists[2] == "eat" {
					fmt.Println(S[i].Name, ArgsLists[2], "grass")
				}
				if ArgsLists[2] == "move" {
					fmt.Println(S[i].Name, ArgsLists[2], "walk")
				}
				if ArgsLists[2] == "speak" {
					fmt.Println(S[i].Name, ArgsLists[2], "moo")
				}
			}
			if S[i].Type == "bird" {
				if ArgsLists[2] == "eat" {
					fmt.Println(S[i].Name, ArgsLists[2], "worms")
				}
				if ArgsLists[2] == "move" {
					fmt.Println(S[i].Name, ArgsLists[2], "fly")
				}
				if ArgsLists[2] == "speak" {
					fmt.Println(S[i].Name, ArgsLists[2], "peep")
				}
			}
			if S[i].Type == "snake" {
				if ArgsLists[2] == "eat" {
					fmt.Println(S[i].Name, ArgsLists[2], "mice")
				}
				if ArgsLists[2] == "move" {
					fmt.Println(S[i].Name, ArgsLists[2], "slither")
				}
				if ArgsLists[2] == "speak" {
					fmt.Println(S[i].Name, ArgsLists[2], "hsss")
				}
			}
		}else {
			if i == len(S) -1 &&  IsExists == 0 {
				var res string
				res = ArgsLists[1] + " not exists"
				fmt.Println(res)
			}
		}

	}
}

//yaml文件内容映射的结构体
type Yaml struct {
	Animals []struct {
		Name string `yaml:"name"`
		Type string `yaml:"type"`
	}
}
