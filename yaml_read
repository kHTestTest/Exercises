package main

import (
	"fmt"
	yaml "gopkg.in/yaml.v2"
	"io/ioutil"
	"os"
	"strings"
)

//主函数
func main() {
	conf := new(Yaml)
	yamlFile, err := ioutil.ReadFile("config.yaml")
	if err != nil {
		fmt.Printf("yamlFile.Get err #%v ", err)
	}
	err = yaml.Unmarshal(yamlFile, &conf)
	if err != nil {
		fmt.Printf("Unmarshal: %v\n", err)
	}
	ProcessCmd(os.Args, conf.Animals)
}

// 获取命令行参数并解析
func ProcessCmd(ArgsLists []string, S []struct { Name string "yaml:\"name\""; Type string "yaml:\"type\"" }) {
	IsExists := 0
	IsUpper := 0
	if os.Getenv("SHOUT") == "True"{
		IsUpper = 1
	}
	for i:= 0; i < len(S); i++ {
		if S[i].Name == ArgsLists[1]{
			IsExists = 1
			var res string
			if IsUpper == 0 {
				res = fmt.Sprintf("%s", AnimalsBehave[S[i].Type][ArgsLists[2]])
			}
			if IsUpper == 1{
				res = fmt.Sprintf("%s", strings.ToUpper(AnimalsBehave[S[i].Type][ArgsLists[2]]))
			}
			fmt.Println(res)
		}else {
			if i == len(S) - 1 &&  IsExists == 0 {
				var res string
				res = ArgsLists[1] + " not exists"
				fmt.Println(res)
			}
		}
	}
}

//yaml文件内容映射的结构体
type Yaml struct {
	Animals []struct {
		Name string `yaml:"name"`
		Type string `yaml:"type"`
	}
}

var AnimalsBehave = map[string]map[string]string{
	"cow": map[string]string{
		"eat": "grass",
		"move": "walk",
		"speak": "moo"},
	"snake": map[string]string{
		"eat": "mice", "move": "slither", "speak":"hsss"},
	"bird":map[string]string{
		"eat": "worms","move": "fly","speak":"peeps"},
}
